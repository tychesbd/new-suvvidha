{"version":3,"file":"static/js/909.b8d35429.chunk.js","mappings":"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","sources":["pages/admin/Subscriptions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Paper,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Button,\n  TextField,\n  MenuItem,\n  Grid,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\n// Mock data - in a real app, this would come from an API\nconst mockSubscriptions = [\n  {\n    _id: '1',\n    vendor: { _id: '101', name: 'Vendor 1', email: 'vendor1@example.com' },\n    plan: 'premium',\n    price: 4999,\n    startDate: new Date('2023-10-01'),\n    endDate: new Date('2024-04-01'),\n    status: 'active',\n    paymentStatus: 'paid',\n    features: ['Premium service listing', 'Dedicated customer support', 'Advanced analytics', 'Marketing tools', '180 days validity'],\n  },\n  {\n    _id: '2',\n    vendor: { _id: '102', name: 'Vendor 2', email: 'vendor2@example.com' },\n    plan: 'standard',\n    price: 2499,\n    startDate: new Date('2023-11-15'),\n    endDate: new Date('2024-02-15'),\n    status: 'active',\n    paymentStatus: 'paid',\n    features: ['Featured service listing', 'Priority customer support', 'Analytics dashboard', '90 days validity'],\n  },\n  {\n    _id: '3',\n    vendor: { _id: '103', name: 'Vendor 3', email: 'vendor3@example.com' },\n    plan: 'basic',\n    price: 999,\n    startDate: new Date('2023-12-01'),\n    endDate: new Date('2024-01-01'),\n    status: 'expired',\n    paymentStatus: 'paid',\n    features: ['Basic service listing', 'Customer support', '30 days validity'],\n  },\n  {\n    _id: '4',\n    vendor: { _id: '104', name: 'Vendor 4', email: 'vendor4@example.com' },\n    plan: 'premium',\n    price: 4999,\n    startDate: new Date('2023-12-15'),\n    endDate: new Date('2024-06-15'),\n    status: 'pending',\n    paymentStatus: 'pending',\n    features: ['Premium service listing', 'Dedicated customer support', 'Advanced analytics', 'Marketing tools', '180 days validity'],\n  },\n];\n\nconst StatusChip = styled(Chip)(({ theme, status }) => {\n  let color = theme.palette.info.main;\n  let backgroundColor = theme.palette.info.light;\n  \n  if (status === 'active') {\n    color = theme.palette.success.main;\n    backgroundColor = theme.palette.success.light;\n  } else if (status === 'expired') {\n    color = theme.palette.error.main;\n    backgroundColor = theme.palette.error.light;\n  } else if (status === 'pending') {\n    color = theme.palette.warning.main;\n    backgroundColor = theme.palette.warning.light;\n  }\n  \n  return {\n    color: color,\n    backgroundColor: backgroundColor,\n    fontWeight: 'bold',\n    '& .MuiChip-label': {\n      textTransform: 'capitalize',\n    },\n  };\n});\n\nconst Subscriptions = () => {\n  const [subscriptions, setSubscriptions] = useState(mockSubscriptions);\n  const [filteredSubscriptions, setFilteredSubscriptions] = useState(mockSubscriptions);\n  const [filters, setFilters] = useState({\n    plan: '',\n    status: '',\n    paymentStatus: '',\n    search: '',\n  });\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedSubscription, setSelectedSubscription] = useState(null);\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [verifyDialogOpen, setVerifyDialogOpen] = useState(false);\n\n  // In a real app, you would fetch subscriptions from an API\n  useEffect(() => {\n    // Simulating API call\n    // const fetchSubscriptions = async () => {\n    //   const response = await fetch('/api/subscriptions');\n    //   const data = await response.json();\n    //   setSubscriptions(data);\n    //   setFilteredSubscriptions(data);\n    // };\n    // fetchSubscriptions();\n  }, []);\n\n  // Apply filters\n  useEffect(() => {\n    let result = [...subscriptions];\n    \n    if (filters.plan) {\n      result = result.filter(sub => sub.plan === filters.plan);\n    }\n    \n    if (filters.status) {\n      result = result.filter(sub => sub.status === filters.status);\n    }\n    \n    if (filters.paymentStatus) {\n      result = result.filter(sub => sub.paymentStatus === filters.paymentStatus);\n    }\n    \n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      result = result.filter(sub => \n        sub.vendor.name.toLowerCase().includes(searchLower) ||\n        sub.vendor.email.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    setFilteredSubscriptions(result);\n  }, [filters, subscriptions]);\n\n  const handleFilterChange = (event) => {\n    const { name, value } = event.target;\n    setFilters(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      plan: '',\n      status: '',\n      paymentStatus: '',\n      search: '',\n    });\n  };\n\n  const handleViewDetails = (subscription) => {\n    setSelectedSubscription(subscription);\n    setDetailsOpen(true);\n  };\n\n  const handleVerifyPayment = (subscription) => {\n    setSelectedSubscription(subscription);\n    setVerifyDialogOpen(true);\n  };\n\n  const confirmVerifyPayment = async () => {\n    // In a real app, you would make an API call to update the subscription\n    // const response = await fetch(`/api/subscriptions/${selectedSubscription._id}/verify`, {\n    //   method: 'PUT',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ paymentStatus: 'paid' })\n    // });\n    // const updatedSubscription = await response.json();\n    \n    // Mock update\n    const updatedSubscriptions = subscriptions.map(sub => {\n      if (sub._id === selectedSubscription._id) {\n        return {\n          ...sub,\n          paymentStatus: 'paid',\n          status: 'active'\n        };\n      }\n      return sub;\n    });\n    \n    setSubscriptions(updatedSubscriptions);\n    setVerifyDialogOpen(false);\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Subscription Management\n      </Typography>\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\n        Manage vendor subscriptions and payment verifications\n      </Typography>\n\n      <Paper elevation={2} sx={{ p: 3, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <TextField\n            label=\"Search by vendor name or email\"\n            name=\"search\"\n            value={filters.search}\n            onChange={handleFilterChange}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ width: { xs: '100%', sm: '300px' } }}\n          />\n          \n          <Button\n            startIcon={<FilterListIcon />}\n            onClick={() => setShowFilters(!showFilters)}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            {showFilters ? 'Hide Filters' : 'Show Filters'}\n          </Button>\n        </Box>\n\n        {showFilters && (\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            <Grid item xs={12} sm={4}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Plan</InputLabel>\n                <Select\n                  name=\"plan\"\n                  value={filters.plan}\n                  onChange={handleFilterChange}\n                  label=\"Plan\"\n                >\n                  <MenuItem value=\"\">All Plans</MenuItem>\n                  <MenuItem value=\"basic\">Basic</MenuItem>\n                  <MenuItem value=\"standard\">Standard</MenuItem>\n                  <MenuItem value=\"premium\">Premium</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Status</InputLabel>\n                <Select\n                  name=\"status\"\n                  value={filters.status}\n                  onChange={handleFilterChange}\n                  label=\"Status\"\n                >\n                  <MenuItem value=\"\">All Statuses</MenuItem>\n                  <MenuItem value=\"active\">Active</MenuItem>\n                  <MenuItem value=\"pending\">Pending</MenuItem>\n                  <MenuItem value=\"expired\">Expired</MenuItem>\n                  <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Payment Status</InputLabel>\n                <Select\n                  name=\"paymentStatus\"\n                  value={filters.paymentStatus}\n                  onChange={handleFilterChange}\n                  label=\"Payment Status\"\n                >\n                  <MenuItem value=\"\">All Payment Statuses</MenuItem>\n                  <MenuItem value=\"paid\">Paid</MenuItem>\n                  <MenuItem value=\"pending\">Pending</MenuItem>\n                  <MenuItem value=\"failed\">Failed</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <Button variant=\"text\" onClick={resetFilters}>\n                Reset Filters\n              </Button>\n            </Grid>\n          </Grid>\n        )}\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Vendor</TableCell>\n                <TableCell>Plan</TableCell>\n                <TableCell>Price</TableCell>\n                <TableCell>Start Date</TableCell>\n                <TableCell>End Date</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Payment</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredSubscriptions.length > 0 ? (\n                filteredSubscriptions.map((subscription) => (\n                  <TableRow key={subscription._id}>\n                    <TableCell>\n                      <Typography variant=\"body2\">{subscription.vendor.name}</Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {subscription.vendor.email}\n                      </Typography>\n                    </TableCell>\n                    <TableCell sx={{ textTransform: 'capitalize' }}>{subscription.plan}</TableCell>\n                    <TableCell>₹{subscription.price}</TableCell>\n                    <TableCell>{new Date(subscription.startDate).toLocaleDateString()}</TableCell>\n                    <TableCell>{new Date(subscription.endDate).toLocaleDateString()}</TableCell>\n                    <TableCell>\n                      <StatusChip \n                        label={subscription.status} \n                        status={subscription.status} \n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <StatusChip \n                        label={subscription.paymentStatus} \n                        status={subscription.paymentStatus === 'paid' ? 'active' : \n                               subscription.paymentStatus === 'pending' ? 'pending' : 'expired'} \n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"View Details\">\n                        <IconButton size=\"small\" onClick={() => handleViewDetails(subscription)}>\n                          <VisibilityIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Tooltip>\n                      {subscription.paymentStatus === 'pending' && (\n                        <Tooltip title=\"Verify Payment\">\n                          <IconButton \n                            size=\"small\" \n                            color=\"success\" \n                            onClick={() => handleVerifyPayment(subscription)}\n                          >\n                            <CheckCircleIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    No subscriptions found matching the filters\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n\n      {/* Subscription Details Dialog */}\n      <Dialog open={detailsOpen} onClose={() => setDetailsOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Subscription Details</DialogTitle>\n        <DialogContent dividers>\n          {selectedSubscription && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom sx={{ textTransform: 'capitalize' }}>\n                {selectedSubscription.plan} Plan\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">Vendor</Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {selectedSubscription.vendor.name}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">Email</Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {selectedSubscription.vendor.email}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">Price</Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    ₹{selectedSubscription.price}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">Status</Typography>\n                  <StatusChip \n                    label={selectedSubscription.status} \n                    status={selectedSubscription.status} \n                    size=\"small\"\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">Start Date</Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {new Date(selectedSubscription.startDate).toLocaleDateString()}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"subtitle2\">End Date</Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {new Date(selectedSubscription.endDate).toLocaleDateString()}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\">Features</Typography>\n                  <Box component=\"ul\" sx={{ pl: 2 }}>\n                    {selectedSubscription.features.map((feature, index) => (\n                      <Typography component=\"li\" variant=\"body2\" key={index}>\n                        {feature}\n                      </Typography>\n                    ))}\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDetailsOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Verify Payment Dialog */}\n      <Dialog open={verifyDialogOpen} onClose={() => setVerifyDialogOpen(false)}>\n        <DialogTitle>Verify Payment</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\">\n            Are you sure you want to verify the payment for this subscription?\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            This will mark the payment as paid and activate the subscription.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setVerifyDialogOpen(false)}>Cancel</Button>\n          <Button onClick={confirmVerifyPayment} color=\"success\" variant=\"contained\">\n            Verify Payment\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default Subscriptions;"],"names":["mockSubscriptions","_id","vendor","name","email","plan","price","startDate","Date","endDate","status","paymentStatus","features","StatusChip","styled","Chip","_ref","theme","color","palette","info","main","backgroundColor","light","success","error","warning","fontWeight","textTransform","Subscriptions","subscriptions","setSubscriptions","useState","filteredSubscriptions","setFilteredSubscriptions","filters","setFilters","search","showFilters","setShowFilters","selectedSubscription","setSelectedSubscription","detailsOpen","setDetailsOpen","verifyDialogOpen","setVerifyDialogOpen","useEffect","result","filter","sub","searchLower","toLowerCase","includes","handleFilterChange","event","value","target","prev","_jsxs","Box","children","_jsx","Typography","variant","gutterBottom","paragraph","Paper","elevation","sx","p","mb","display","justifyContent","alignItems","TextField","label","onChange","size","width","xs","sm","Button","startIcon","FilterListIcon","onClick","Grid","container","spacing","item","FormControl","fullWidth","InputLabel","Select","MenuItem","resetFilters","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","length","map","subscription","toLocaleDateString","Tooltip","title","IconButton","handleViewDetails","VisibilityIcon","fontSize","handleVerifyPayment","CheckCircleIcon","colSpan","align","Dialog","open","onClose","maxWidth","DialogTitle","DialogContent","dividers","component","pl","feature","index","DialogActions","mt","async","updatedSubscriptions"],"sourceRoot":""}